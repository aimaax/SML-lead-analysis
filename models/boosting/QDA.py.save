import os
import sys
sys.path.append(str(sys.path[0][:-14]))
dirname = os.getcwd()
dirname = dirname.replace("/models/boosting", "")
sys.path.insert(1, os.path.join(dirname, "general_classes"))
from DataPreparation import DataPreparation
from Performance import Performance
from sklearn.discriminant_analysis import LinearDiscriminantAnalysis, QuadraticDiscriminantAnalysis
from sklearn.metrics import confusion_matrix, classification_report, precision_score
import numpy as np
from imblearn.over_sampling import SMOTE
from imblearn.under_sampling import RandomUnderSampler
from imblearn.pipeline import Pipeline
from sklearn.model_selection import cross_val_score
from sklearn.model_selection import RepeatedStratifiedKFold
from sklearn import preprocessing

def main():
    # Set data
    path = dirname + "/data/train.csv"
    drop_cols = ["Total words"]
    DataPrep = DataPreparation(path, drop_cols = [], numpy_bool = True, gender = False, normalize = False)
    X_train, X_test, Y_train, Y_test = DataPrep.get_sets()

    # Use SMOTE
    """ 
    X_res, Y_res = DataPrep.SMOTE(num=None,perc=250,k=5,SMOTE_feature=-1)
    X_res2, Y_res2 = DataPrep.SMOTE(num=None,perc=150,k=5,SMOTE_feature=1)

    X_train = np.concatenate((X_train, X_res))
    X_train = np.concatenate((X_train, X_res2))

    Y_train = np.concatenate((Y_train, Y_res))
    Y_train = np.concatenate((Y_train, Y_res2))
    """
    """
    sm = SMOTE(random_state=42)
    X_res, Y_res = sm.fit_resample(X_train, Y_train)
    X_train = np.concatenate((X_train, X_res))
    Y_train = np.concatenate((Y_train, Y_res))


    """
    qda = QuadraticDiscriminantAnalysis()
    
    """
    scaler = preprocessing.StandardScaler().fit(X_train)
    X_train = scaler.transform(X_train)
    X_test = scaler.transform(X_test)
    """
    model2 = qda.fit(X_train, Y_train)

    cv = RepeatedStratifiedKFold(n_splits=10, n_repeats=3, random_state=1)
    scores = cross_val_score(model2, X_test, Y_test, scoring='accuracy', cv=cv, n_jobs=-1)
    print(f"Mean accuracy: {np.mean(scores)}")

if __name__ == "__main__":
    main()
j
j
k
k
k
:
^X
^Z
